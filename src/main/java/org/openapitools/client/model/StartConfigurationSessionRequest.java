/*
 * AWS AppConfig Data
 * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data. Here's how it works:</p> <p>Your application retrieves configuration data by first establishing a configuration session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's client then makes periodic calls to <a>GetLatestConfiguration</a> to check for and retrieve the latest data available.</p> <p>When calling <code>StartConfigurationSession</code>, your code sends the following information:</p> <ul> <li> <p>Identifiers (ID or name) of an AppConfig application, environment, and configuration profile that the session tracks.</p> </li> <li> <p>(Optional) The minimum amount of time the session's client must wait between calls to <code>GetLatestConfiguration</code>.</p> </li> </ul> <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to the session's client and used the first time it calls <code>GetLatestConfiguration</code> for that session.</p> <important> <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You <i>must</i> use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p> </important> <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent <code>ConfigurationToken</code> value it has and receives in response:</p> <ul> <li> <p> <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value to use on the next call to <code>GetLatestConfiguration</code>.</p> </li> <li> <p> <code>NextPollIntervalInSeconds</code>: the duration the client should wait before making its next call to <code>GetLatestConfiguration</code>. This duration may vary over the course of the session, so it should be used instead of the value sent on the <code>StartConfigurationSession</code> call.</p> </li> <li> <p>The configuration: the latest data intended for the session. This may be empty if the client already has the latest version of the configuration.</p> </li> </ul> <important> <p>The <code>InitialConfigurationToken</code> and <code>NextPollConfigurationToken</code> should only be used once. To support long poll use cases, the tokens are valid for up to 24 hours. If a <code>GetLatestConfiguration</code> call uses an expired token, the system returns <code>BadRequestException</code>.</p> </important> <p>For more information and to view example CLI commands that show how to retrieve a configuration using the AppConfig Data <code>StartConfigurationSession</code> and <code>GetLatestConfiguration</code> API actions, see <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration\">Retrieving the configuration</a> in the <i>AppConfig User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-11-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartConfigurationSessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:42:21.686270+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class StartConfigurationSessionRequest {
  public static final String SERIALIZED_NAME_APPLICATION_IDENTIFIER = "ApplicationIdentifier";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IDENTIFIER)
  @javax.annotation.Nonnull
  private String applicationIdentifier;

  public static final String SERIALIZED_NAME_ENVIRONMENT_IDENTIFIER = "EnvironmentIdentifier";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_IDENTIFIER)
  @javax.annotation.Nonnull
  private String environmentIdentifier;

  public static final String SERIALIZED_NAME_CONFIGURATION_PROFILE_IDENTIFIER = "ConfigurationProfileIdentifier";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_PROFILE_IDENTIFIER)
  @javax.annotation.Nonnull
  private String configurationProfileIdentifier;

  public static final String SERIALIZED_NAME_REQUIRED_MINIMUM_POLL_INTERVAL_IN_SECONDS = "RequiredMinimumPollIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_REQUIRED_MINIMUM_POLL_INTERVAL_IN_SECONDS)
  @javax.annotation.Nullable
  private Integer requiredMinimumPollIntervalInSeconds;

  public StartConfigurationSessionRequest() {
  }

  public StartConfigurationSessionRequest applicationIdentifier(@javax.annotation.Nonnull String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
    return this;
  }

  /**
   * The application ID or the application name.
   * @return applicationIdentifier
   */
  @javax.annotation.Nonnull
  public String getApplicationIdentifier() {
    return applicationIdentifier;
  }

  public void setApplicationIdentifier(@javax.annotation.Nonnull String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
  }


  public StartConfigurationSessionRequest environmentIdentifier(@javax.annotation.Nonnull String environmentIdentifier) {
    this.environmentIdentifier = environmentIdentifier;
    return this;
  }

  /**
   * The environment ID or the environment name.
   * @return environmentIdentifier
   */
  @javax.annotation.Nonnull
  public String getEnvironmentIdentifier() {
    return environmentIdentifier;
  }

  public void setEnvironmentIdentifier(@javax.annotation.Nonnull String environmentIdentifier) {
    this.environmentIdentifier = environmentIdentifier;
  }


  public StartConfigurationSessionRequest configurationProfileIdentifier(@javax.annotation.Nonnull String configurationProfileIdentifier) {
    this.configurationProfileIdentifier = configurationProfileIdentifier;
    return this;
  }

  /**
   * The configuration profile ID or the configuration profile name.
   * @return configurationProfileIdentifier
   */
  @javax.annotation.Nonnull
  public String getConfigurationProfileIdentifier() {
    return configurationProfileIdentifier;
  }

  public void setConfigurationProfileIdentifier(@javax.annotation.Nonnull String configurationProfileIdentifier) {
    this.configurationProfileIdentifier = configurationProfileIdentifier;
  }


  public StartConfigurationSessionRequest requiredMinimumPollIntervalInSeconds(@javax.annotation.Nullable Integer requiredMinimumPollIntervalInSeconds) {
    this.requiredMinimumPollIntervalInSeconds = requiredMinimumPollIntervalInSeconds;
    return this;
  }

  /**
   * Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can&#39;t call &lt;a&gt;GetLatestConfiguration&lt;/a&gt; more frequently than every 60 seconds.
   * minimum: 15
   * maximum: 86400
   * @return requiredMinimumPollIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getRequiredMinimumPollIntervalInSeconds() {
    return requiredMinimumPollIntervalInSeconds;
  }

  public void setRequiredMinimumPollIntervalInSeconds(@javax.annotation.Nullable Integer requiredMinimumPollIntervalInSeconds) {
    this.requiredMinimumPollIntervalInSeconds = requiredMinimumPollIntervalInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartConfigurationSessionRequest startConfigurationSessionRequest = (StartConfigurationSessionRequest) o;
    return Objects.equals(this.applicationIdentifier, startConfigurationSessionRequest.applicationIdentifier) &&
        Objects.equals(this.environmentIdentifier, startConfigurationSessionRequest.environmentIdentifier) &&
        Objects.equals(this.configurationProfileIdentifier, startConfigurationSessionRequest.configurationProfileIdentifier) &&
        Objects.equals(this.requiredMinimumPollIntervalInSeconds, startConfigurationSessionRequest.requiredMinimumPollIntervalInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationIdentifier, environmentIdentifier, configurationProfileIdentifier, requiredMinimumPollIntervalInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartConfigurationSessionRequest {\n");
    sb.append("    applicationIdentifier: ").append(toIndentedString(applicationIdentifier)).append("\n");
    sb.append("    environmentIdentifier: ").append(toIndentedString(environmentIdentifier)).append("\n");
    sb.append("    configurationProfileIdentifier: ").append(toIndentedString(configurationProfileIdentifier)).append("\n");
    sb.append("    requiredMinimumPollIntervalInSeconds: ").append(toIndentedString(requiredMinimumPollIntervalInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationIdentifier");
    openapiFields.add("EnvironmentIdentifier");
    openapiFields.add("ConfigurationProfileIdentifier");
    openapiFields.add("RequiredMinimumPollIntervalInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationIdentifier");
    openapiRequiredFields.add("EnvironmentIdentifier");
    openapiRequiredFields.add("ConfigurationProfileIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartConfigurationSessionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartConfigurationSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartConfigurationSessionRequest is not found in the empty JSON string", StartConfigurationSessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartConfigurationSessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartConfigurationSessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartConfigurationSessionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationIdentifier").toString()));
      }
      if (!jsonObj.get("EnvironmentIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnvironmentIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnvironmentIdentifier").toString()));
      }
      if (!jsonObj.get("ConfigurationProfileIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigurationProfileIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigurationProfileIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartConfigurationSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartConfigurationSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartConfigurationSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartConfigurationSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartConfigurationSessionRequest>() {
           @Override
           public void write(JsonWriter out, StartConfigurationSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartConfigurationSessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartConfigurationSessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartConfigurationSessionRequest
   * @throws IOException if the JSON string is invalid with respect to StartConfigurationSessionRequest
   */
  public static StartConfigurationSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartConfigurationSessionRequest.class);
  }

  /**
   * Convert an instance of StartConfigurationSessionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

